/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdi_practica1;
import java.awt.Color;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.math.plot.Plot2DPanel;

/**
 *
 * @author gerar
 */
public class AbrirImagen extends javax.swing.JFrame {
    private File archivo;
    private BufferedImage img;
    private int ImgAltura, ImgAncho;
    private int formatoColor;
    private int numPixeles;
    
    /**
     * Creates new form AbrirImagen
     */
    public AbrirImagen() {
        initComponents();
        jButton1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        label1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label1.setText("Visualizador de imágenes");

        jLabel1.setText("Nombre del archivo:");

        jLabel4.setText("Alto:");

        jLabel6.setText("Ancho:");

        jButton1.setText("test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(623, 350));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 619, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Seleccionar Imagen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Op. Punto");

        jMenuItem3.setText("Histogramas");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem2.setText("Umbralización");
        jMenuItem2.setToolTipText("menuUmb");
        jMenuItem2.setActionCommand("");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem4.setText("Operadores");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(426, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(31, 31, 31))
        );

        label1.getAccessibleContext().setAccessibleDescription("");
        jLabel4.getAccessibleContext().setAccessibleName("labelAlto");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // BOTON SELECCIONAR IMAGEN (EN EL MENU)
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        
        ImagePicker i_picker = new ImagePicker();
        archivo = i_picker.getArchivo();
        if(archivo != null){
            jLabel3.setText(archivo.getName());
            try {
                img = ImageIO.read(archivo);
                this.ImgAltura = img.getHeight();
                this.ImgAncho = img.getWidth();
                this.jLabel5.setText(this.ImgAltura+"");
                this.jLabel7.setText(this.ImgAncho+"");
                formatoColor = img.getColorModel().getColorSpace().getType();
                numPixeles = ImgAltura * ImgAncho;
                ImageIcon  ii  = new ImageIcon(img);
                PanelImagen pImg = new PanelImagen(jPanel1,ii);
                if(jPanel1.getComponentCount() > 0){
                    jPanel1.remove(jPanel1.getComponent(0));
                }
                jPanel1.add(pImg).repaint();
               
            } catch (IOException e) {
                System.out.println("Error al convertir el archivo a iágen:"+e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // BOTON TEST
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
        ImageIcon  ii  = new ImageIcon(distGammaGS());
        PanelImagen pImg = new PanelImagen(jPanel1,ii);
        jPanel1.remove(jPanel1.getComponent(0));
        jPanel1.add(pImg).repaint();
        */
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    //Boton umbralización
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        if(archivo != null){
            double frecuencias[] = new double[256];
            BufferedImage bnImg = distGammaGS();
            getFrecuencias(frecuencias, bnImg);
            OTSU ventana = new OTSU(generaHistogramaGray(frecuencias), bnImg, normalizar(frecuencias,256,ImgAltura*ImgAncho));
            ventana.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "No ha cargado ninguna imágen");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // Botón Histogramas
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(archivo != null){
            if(revisarEscalaGrises() || formatoColor == ColorSpace.CS_GRAY){
                Plot2DPanel hist;
                hist = generaHistogramaGray();
                MostrarHistogramas mh = new MostrarHistogramas(hist);
                mh.setVisible(true);
            }else{
                generaHistogramas();
            }
        }else{
            JOptionPane.showMessageDialog(null, "No ha cargado ninguna imágen");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        
        OpPuntoVentana ventana = new OpPuntoVentana();
        ventana.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

   
    
    
    private boolean revisarEscalaGrises(){
        Random r = new Random();
        int rgb = img.getRGB(0, 0);
        int red = MascaraRGB.getRed(rgb);
        int green = MascaraRGB.getGreen(rgb);
        int blue = MascaraRGB.getBlue(rgb);
        if(red == green && red == blue){
            rgb = img.getRGB(r.nextInt(this.ImgAncho), r.nextInt(this.ImgAltura));
            red = MascaraRGB.getRed(rgb);
            green = MascaraRGB.getGreen(rgb);
            blue = MascaraRGB.getBlue(rgb);
            return red == green && red == blue;
        }else{
            return false;
        }
    }
    
    //Genera el histograma de la imagen cargada actualmente
    private Plot2DPanel generaHistogramaGray(){
        double x[] = new double[256];
        double frecuencias[] = new double[256];
        Plot2DPanel hist = new Plot2DPanel();
        
        hist.setFixedBounds(0, 0, 255);
        
        getFrecuencias(frecuencias);
        //Generamos la matriz que servirá de entrada a la libreria de graficación
        for(int i = 0; i< 256; i++){
            x[i] = i;
        }
        
        hist.addBarPlot("Hist Red",Color.BLACK, x, normalizar(frecuencias,256,numPixeles));
        
        //JFrame frame = new JFrame();
        //frame.setContentPane(histBlue);
        //frame.setVisible(true);
        return hist;
    }
    
    //Genera el histograma de una frecuencia dada
    private Plot2DPanel generaHistogramaGray(double frecuencias[]){
        double x[] = new double[256];
        Plot2DPanel hist = new Plot2DPanel();
        
        hist.setFixedBounds(0, 0, 255);
        
        getFrecuencias(frecuencias);
        //Generamos la matriz que servirá de entrada a la libreria de graficación
        for(int i = 0; i< 256; i++){
            x[i] = i;
        }
        
        hist.addBarPlot("Hist Red",Color.BLACK, x, normalizar(frecuencias,256,numPixeles));
        
        //JFrame frame = new JFrame();
        //frame.setContentPane(histBlue);
        //frame.setVisible(true);
        return hist;
    }
    
    private void generaHistogramas(){
        double x[] = new double[256];
        double frecuenciasRed[] = new double[256];
        double frecuenciasBlue[] = new double[256];
        double frecuenciasGreen[] = new double[256];
        Plot2DPanel histRed = new Plot2DPanel();
        Plot2DPanel histGreen = new Plot2DPanel();
        Plot2DPanel histBlue = new Plot2DPanel();
        
        histRed.setFixedBounds(0, 0, 255);
        histGreen.setFixedBounds(0, 0, 255);
        histBlue.setFixedBounds(0, 0, 255);
        
        getFrecuencias(frecuenciasRed, frecuenciasBlue, frecuenciasGreen);
        //Generamos la matriz que servirá de entrada a la libreria de graficación
        for(int i = 0; i< 256; i++){
            x[i] = i;
        }
        
        histRed.addBarPlot("Hist Red",Color.RED, x, normalizar(frecuenciasRed,256,numPixeles));
        histBlue.addBarPlot("Hist Blue",Color.BLUE, x, normalizar(frecuenciasBlue,256,numPixeles));
        histGreen.addBarPlot("Histograma Green", Color.GREEN, x, normalizar(frecuenciasGreen,256,numPixeles));
        
        //JFrame frame = new JFrame();
        //frame.setContentPane(histBlue);
        //frame.setVisible(true);
        MostrarHistogramas mh = new MostrarHistogramas(histRed, histBlue, histGreen);
        mh.setVisible(true);
    }
    
    //Cuenta las frecuencias si ya se sabe que es RGB
    private void getFrecuencias(double frecuenciasRed[], double frecuenciasBlue[], double frecuenciasGreen[]){
        
        //Inicializar en 0's
        for (int i = 0; i< 256; i++){
            frecuenciasRed[i]=0;
            frecuenciasBlue[i]=0;
            frecuenciasGreen[i]=0;
        }
        for(int i = 0; i < this.ImgAltura; i++){
            for (int j = 0; j < this.ImgAncho; j++){
                frecuenciasRed[MascaraRGB.getRed(img.getRGB(j, i))] += 1;
                frecuenciasBlue[MascaraRGB.getBlue(img.getRGB(j, i))] += 1;
                frecuenciasGreen[MascaraRGB.getGreen(img.getRGB(j, i))] += 1;
            }
        }
    }
    
    
    //Cuenta las frecuencias de la imagen cargada si ya se sabe que es escala de grises
    private void getFrecuencias(double frecuencias[]){
        
        //Inicializar en 0's
        for (int i = 0; i< 256; i++){
            frecuencias[i]=0;
        }
        for(int i = 0; i < this.ImgAltura; i++){
            for (int j = 0; j < this.ImgAncho; j++){
                frecuencias[MascaraRGB.getRed(img.getRGB(j, i))] += 1;
            }
        }
    }
    
    //Genera las frecuencias de una imagen dada, si ya se sabe que es escala de grises
    private void getFrecuencias(double frecuencias[], BufferedImage img){
        
        //Inicializar en 0's
        for (int i = 0; i< 256; i++){
            frecuencias[i]=0;
        }
        for(int i = 0; i < this.ImgAltura; i++){
            for (int j = 0; j < this.ImgAncho; j++){
                frecuencias[MascaraRGB.getRed(img.getRGB(j, i))] += 1;
            }
        }
    }
    
    private double[] normalizar(double frecuencias[], int tamanio, int total){
        double frecNormalizadas[] = new double[tamanio];
        for(int i=0; i< tamanio; i++){
            frecNormalizadas[i] = frecuencias[i]/total;
        }
        return frecNormalizadas;
    }
    
    private BufferedImage distGammaGS(){
        //copiamos la imagen para no modificar la original
        BufferedImage nuevaImagen = new BufferedImage(ImgAncho, ImgAltura, BufferedImage.TYPE_INT_RGB);
        nuevaImagen.setData(img.getData());
        int rgb, trans;
        for(int y = 0; y < ImgAltura; y++){
            for(int x = 0; x < ImgAncho; x++){
                rgb = nuevaImagen.getRGB(x, y);
                trans = criterioDistGamma(MascaraRGB.getRed(rgb), MascaraRGB.getGreen(rgb), MascaraRGB.getBlue(rgb));
                nuevaImagen.setRGB(x, y, MascaraRGB.maskRGB(trans,trans,trans));
            }
        }
        return nuevaImagen;
    }
    
    private int criterioDistGamma(int red, int green, int blue){
        return (int) Math.round((0.309*red) + (0.609*green) + (0.082*blue));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}
